(function() {

    "use strict";


    var findById = function*(entitySchema, id, ceramic, db) {
        var query = db.setRowId({}, id);
        return yield* findOne(entitySchema, query, {}, ceramic, db);
    };



    var find = function*(entitySchema, query, p1, p2, p3) {
        var options, ceramic, db;

        if (arguments.length === 4) {
            options = null;
            ceramic = p1;
            db = p2;
        } else {
            options = p1;
            ceramic = p2;
            db = p3;
        }

        var items = yield* db.find(entitySchema.collection, query, options);
        if (items.length) {
            var results = [];
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                results.push(yield* ceramic.constructEntity(item, entitySchema, { systemFields: ["__updateTimestamp"] }));
            }
            return results;
        } else {
            return [];
        }
    };


    var findOne = function*(entitySchema, query, p1, p2, p3) {
        var options, ceramic, db;

        if (arguments.length === 4) {
            options = null;
            ceramic = p1;
            db = p2;
        } else {
            options = p1;
            ceramic = p2;
            db = p3;
        }

        var result = yield* db.findOne(entitySchema.collection, query, options);
        if (result) {
            return yield* ceramic.constructEntity(result, entitySchema, { systemFields: ["__updateTimestamp"] });
        }
    };


    var count = function*(entitySchema, query, ceramic, db) {
        return yield* db.count(entitySchema.collection, query);
    };


    var destroyAll = function*(entitySchema, query, ceramic, db) {
        if (typeof entitySchema.canDestroyAll === "function" && entitySchema.canDestroyAll(query)) {
            return yield* db.remove(entitySchema.collection, query);
        } else {
            throw new Error("Call to destroyAll must pass safety checks on query.");
        }
    };


    var save = function*(record, entitySchema, ceramic, db) {
        if (entitySchema.autoGenerated) {
            for (var fieldName in entitySchema.autoGenerated) {
                var def = entitySchema.autoGenerated[fieldName];
                switch (def.event) {
                    case 'created':
                        if (!db.getRowId(record)) {
                            record[fieldName] = Date.now();
                        }
                        break;
                    case 'updated':
                        record[fieldName] = Date.now();
                }
            }
        }

        var errors = yield* ceramic.validate(record, entitySchema);

        if (!errors.length) {
            if (db.getRowId(record) && (entitySchema.concurrency === 'optimistic' || !entitySchema.concurrency)) {
                var _item = yield* db.findOne(entitySchema.collection, db.setRowId({}, db.getRowId(record)));
                if (_item.__updateTimestamp !== record.__updateTimestamp) {
                    throw new Error("Update timestamp mismatch. Was " + _item.__updateTimestamp + " in saved, " + record.__updateTimestamp + " in new.");
                }
            }

            record.__updateTimestamp = Date.now();

            var result;
            if (!db.getRowId(record)) {
                if (entitySchema.logging && entitySchema.logging.onInsert) {
                    var insertEvent = {
                        type: entitySchema.logging.onInsert,
                        data: record
                    };
                    yield* db.insert('events', insertEvent);
                }
                result = yield* db.insert(entitySchema.collection, record);
                db.setRowId(record, result.insertedId);
            } else {
                if (entitySchema.logging && entitySchema.logging.onUpdate) {
                    var updateEvent = {
                        type: entitySchema.logging.onUpdate,
                        data: record
                    };
                    db.insert('events', updateEvent);
                }
                var query = db.setRowId({}, db.getRowId(record));
                yield* db.update(entitySchema.collection, query, record);
            }
        } else {
            var details = "Cannot save " + entitySchema.name;
            details = details + ": " + (errors.join(', ')) + ".";
            throw new Error(details);
        }
    };


    var destroy = function*(record, entitySchema, ceramic, db) {
        var query = db.setRowId({}, db.getRowId(record));
        return db.remove(entitySchema.collection, query);
    };


    var link = function*(record, typeDef, name, ceramic, db) {
        var query, result;

        var link = typeDef.links[name];
        var otherTypeDef = yield* ceramic.getEntitySchema(link.type);
        if (link.key) {
            //#this handles keys of the type [{credentialId: _id}, {username: username}]
            if (typeof link.key === 'string') {
                switch (typeDef.schema.properties[link.key].type) {
                    case 'string':
                        return yield* findById(entitySchema, record[link.key], ceramic, db);
                    case 'array':
                        throw new Error("Array keys are not implemented");
                }
            } else if (link.key instanceof Array) {
                query = {};
                link.key.forEach(function(key) {
                    for(var keyFrom of key) {
                        var keyTo = key[keyFrom];
                        query[keyTo] = record[keyFrom];
                    }
                }, record);
                return yield* findOne(otherTypeDef, query, ceramic, db);
            } else {
                throw new Error("Cannot parse this key");
            }

        } else if (link.field) {
            //handles keys of the type [{credentialId: _id}, {username: username}]
            if (typeof link.field === 'string') {
                switch (otherTypeDef.schema.properties[link.field].type) {
                    case 'string':
                        var params = {};
                        params["" + link.field] = db.getRowId(record);
                        result = yield* find(otherTypeDef, params, ceramic, db);
                        if (link.multiplicity === "one") {
                            if (result.length) {
                                return result[0];
                            }
                        } else {
                            return result;
                        }
                        break;
                    case 'array':
                        throw new Error("Array keys are not implemented");
                }
            } else if (link.field instanceof Array) {
                query = {};
                link.field.forEach(function(field) {
                    for(var fieldFrom of field) {
                        var fieldTo = field[fieldFrom];
                        query[fieldFrom] = record[fieldTo];
                    }
                }, record);
                return yield* findOne(otherTypeDef, query, ceramic, db);
            } else {
                throw new Error("Cannot parse this key");
            }

        } else {
            throw new Error("Invalid link " + name + " in " + typeDef.name);
        }
    };


    module.exports = {
        findById: findById,
        find: find,
        findOne: findOne,
        count: count,
        destroyAll: destroyAll,
        save: save,
        destroy: destroy,
        link: link
    };

})();
